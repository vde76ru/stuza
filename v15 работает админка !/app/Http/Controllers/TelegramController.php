<?php

/*
|--------------------------------------------------------------------------
| –ü—É—Ç—å: /var/www/www-root/data/www/stuj.ru/app/Http/Controllers/TelegramController.php
| –û–ø–∏—Å–∞–Ω–∏–µ: –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
|--------------------------------------------------------------------------
*/

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;

class TelegramController extends Controller
{
    /**
     * Telegram Bot Token (–∏–∑ .env)
     */
    private function getBotToken(): string
    {
        return env('TELEGRAM_BOT_TOKEN', '');
    }

    /**
     * Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ .env)
     */
    private function getAdminChatId(): string
    {
        return env('TELEGRAM_ADMIN_CHAT_ID', '');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
     * POST /api/telegram/webhook
     */
    public function webhook(Request $request): JsonResponse
    {
        try {
            $update = $request->all();
            
            Log::info('Telegram webhook received', $update);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!isset($update['message'])) {
                return response()->json(['status' => 'ok']);
            }

            $message = $update['message'];
            $chatId = $message['chat']['id'];
            $text = $message['text'] ?? '';
            $userId = $message['from']['id'];
            $userName = $message['from']['first_name'] ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (str_starts_with($text, '/start')) {
                $this->handleStartCommand($chatId, $text, $userName);
            } elseif (str_starts_with($text, '/order_')) {
                $this->handleOrderCommand($chatId, $text, $userName, $userId);
            } elseif (str_starts_with($text, '/catalog')) {
                $this->handleCatalogCommand($chatId, $userName);
            } elseif (str_starts_with($text, '/help')) {
                $this->handleHelpCommand($chatId, $userName);
            } else {
                $this->handleUnknownCommand($chatId, $userName);
            }

            return response()->json(['status' => 'ok']);

        } catch (\Exception $e) {
            Log::error('Telegram webhook error: ' . $e->getMessage());
            return response()->json(['status' => 'error', 'message' => $e->getMessage()]);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private function handleStartCommand(string $chatId, string $text, string $userName): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–∫–∞–∑–∞
        if (preg_match('/\/start order_(\d+)/', $text, $matches)) {
            $productId = $matches[1];
            $this->handleOrderCommand($chatId, '/order_' . $productId, $userName, null);
            return;
        }

        $message = "üëã –ü—Ä–∏–≤–µ—Ç, {$userName}!\n\n";
        $message .= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —É–∫—Ä–∞—à–µ–Ω–∏–π **–°—Ç—É–∂–∞**!\n\n";
        $message .= "üîπ –ú—ã —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º \"–º–∞—Ç—Ä—ë—à–∫–∏\"\n";
        $message .= "üîπ –ö–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞\n";
        $message .= "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∫–∞–º–Ω–µ–π –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n";
        $message .= "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n";
        $message .= "/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n";
        $message .= "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n";
        $message .= "üåê –ù–∞—à —Å–∞–π—Ç: " . env('APP_URL', 'https://stuj.ru');

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–∞–∑–∞
     */
    private function handleOrderCommand(string $chatId, string $text, string $userName, ?int $userId): void
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if (preg_match('/\/order_(\d+)/', $text, $matches)) {
            $productId = $matches[1];
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
            $product = Product::with(['theme', 'categories'])->find($productId);
            
            if (!$product) {
                $this->sendMessage($chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $this->sendProductInfo($chatId, $product, $userName);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
            $this->notifyAdminAboutOrder($product, $userName, $userId, $chatId);
            
        } else {
            $this->sendMessage($chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫–∞–∑–∞.");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
     */
    private function sendProductInfo(string $chatId, Product $product, string $userName): void
    {
        $message = "üõçÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ**\n\n";
        $message .= "üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {$product->name}\n";
        $message .= "üí∞ **–¶–µ–Ω–∞:** " . number_format($product->price, 0, ',', ' ') . " ‚ÇΩ\n";
        
        if ($product->theme) {
            $message .= "üé® **–¢–µ–º–∞:** {$product->theme->name}\n";
        }
        
        if ($product->categories->isNotEmpty()) {
            $categories = $product->categories->pluck('name')->implode(', ');
            $message .= "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** {$categories}\n";
        }
        
        $message .= "\nüìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{$product->description}\n\n";
        
        if ($product->use_matryoshka) {
            $message .= "‚ú® *–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç \"–º–∞—Ç—Ä—ë—à–∫–∏\"*\n\n";
        }
        
        $message .= "üìû **–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:** –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n";
        $message .= "üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: " . env('APP_URL') . "/product/{$product->slug}";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if ($product->gallery_images && count($product->gallery_images) > 0) {
            $imageUrl = env('APP_URL') . '/storage/images/' . $product->gallery_images[0];
            $this->sendPhoto($chatId, $imageUrl, $message);
        } else {
            $this->sendMessage($chatId, $message);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫–∞–∑–µ
     */
    private function notifyAdminAboutOrder(Product $product, string $userName, ?int $userId, string $chatId): void
    {
        $adminChatId = $this->getAdminChatId();
        
        if (empty($adminChatId)) {
            Log::warning('Admin chat ID not configured');
            return;
        }

        $message = "üîî **–ù–û–í–´–ô –ó–ê–ö–ê–ó!**\n\n";
        $message .= "üë§ **–ö–ª–∏–µ–Ω—Ç:** {$userName}\n";
        if ($userId) {
            $message .= "üÜî **User ID:** {$userId}\n";
        }
        $message .= "üí¨ **Chat ID:** {$chatId}\n\n";
        $message .= "üõçÔ∏è **–¢–æ–≤–∞—Ä:** {$product->name}\n";
        $message .= "üí∞ **–¶–µ–Ω–∞:** " . number_format($product->price, 0, ',', ' ') . " ‚ÇΩ\n";
        $message .= "üïê **–í—Ä–µ–º—è:** " . now()->format('d.m.Y H:i:s') . "\n\n";
        $message .= "üåê **–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:** " . env('APP_URL') . "/product/{$product->slug}";

        $this->sendMessage($adminChatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    private function handleCatalogCommand(string $chatId, string $userName): void
    {
        $message = "üìÅ **–ö–∞—Ç–∞–ª–æ–≥ —É–∫—Ä–∞—à–µ–Ω–∏–π –°—Ç—É–∂–∞**\n\n";
        $message .= "üåê –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:\n";
        $message .= env('APP_URL', 'https://stuj.ru') . "/catalog\n\n";
        $message .= "üîπ –ö–æ–ª—å—Ü–∞ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –∫–∞–º–Ω—è–º–∏\n";
        $message .= "üîπ –°–µ—Ä—å–≥–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º \"–º–∞—Ç—Ä—ë—à–∫–∏\"\n";
        $message .= "üîπ –ë—Ä–∞—Å–ª–µ—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞\n";
        $message .= "üîπ –ü–æ–¥–≤–µ—Å–∫–∏ –∏ –∫—É–ª–æ–Ω—ã\n\n";
        $message .= "‚ú® –ö–∞–∂–¥–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –Ω–∞—à–∏–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏!\n\n";
        $message .= "üéØ –ü—Ä–æ–π–¥–∏—Ç–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∏–∑ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞:\n";
        $message .= env('APP_URL', 'https://stuj.ru') . "/quiz";

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
     */
    private function handleHelpCommand(string $chatId, string $userName): void
    {
        $message = "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n";
        $message .= "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n";
        $message .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
        $message .= "/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n";
        $message .= "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
        $message .= "**–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:**\n";
        $message .= "1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ\n";
        $message .= "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–∫–∞–∑–∞—Ç—å –≤ Telegram\"\n";
        $message .= "3Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n";
        $message .= "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**\n";
        $message .= "üåê –°–∞–π—Ç: " . env('APP_URL', 'https://stuj.ru') . "\n";
        $message .= "üìß Email: " . env('CONTACT_EMAIL', 'info@stuj.ru') . "\n";
        $message .= "üì± –¢–µ–ª–µ—Ñ–æ–Ω: " . env('CONTACT_PHONE', '+7 (xxx) xxx-xx-xx');

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    private function handleUnknownCommand(string $chatId, string $userName): void
    {
        $message = "‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n";
        $message .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n";
        $message .= "–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: " . env('APP_URL', 'https://stuj.ru');

        $this->sendMessage($chatId, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function sendMessage(string $chatId, string $text): void
    {
        $botToken = $this->getBotToken();
        
        if (empty($botToken)) {
            Log::error('Telegram bot token not configured');
            return;
        }

        $url = "https://api.telegram.org/bot{$botToken}/sendMessage";
        
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
            'disable_web_page_preview' => true
        ];

        try {
            $response = Http::post($url, $data);
            
            if (!$response->successful()) {
                Log::error('Failed to send Telegram message', [
                    'chat_id' => $chatId,
                    'response' => $response->body()
                ]);
            }
        } catch (\Exception $e) {
            Log::error('Telegram API error: ' . $e->getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
     */
    private function sendPhoto(string $chatId, string $photoUrl, string $caption): void
    {
        $botToken = $this->getBotToken();
        
        if (empty($botToken)) {
            Log::error('Telegram bot token not configured');
            return;
        }

        $url = "https://api.telegram.org/bot{$botToken}/sendPhoto";
        
        $data = [
            'chat_id' => $chatId,
            'photo' => $photoUrl,
            'caption' => $caption,
            'parse_mode' => 'Markdown'
        ];

        try {
            $response = Http::post($url, $data);
            
            if (!$response->successful()) {
                Log::error('Failed to send Telegram photo', [
                    'chat_id' => $chatId,
                    'photo_url' => $photoUrl,
                    'response' => $response->body()
                ]);
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                $this->sendMessage($chatId, $caption);
            }
        } catch (\Exception $e) {
            Log::error('Telegram API photo error: ' . $e->getMessage());
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            $this->sendMessage($chatId, $caption);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
     * POST /api/admin/telegram/set-webhook
     */
    public function setWebhook(Request $request): JsonResponse
    {
        $botToken = $this->getBotToken();
        
        if (empty($botToken)) {
            return response()->json([
                'error' => 'Telegram bot token not configured'
            ], 500);
        }

        $webhookUrl = env('APP_URL') . '/api/telegram/webhook';
        $url = "https://api.telegram.org/bot{$botToken}/setWebhook";
        
        try {
            $response = Http::post($url, [
                'url' => $webhookUrl
            ]);
            
            if ($response->successful()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                    'webhook_url' => $webhookUrl,
                    'response' => $response->json()
                ]);
            } else {
                return response()->json([
                    'error' => '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook',
                    'response' => $response->body()
                ], 500);
            }
        } catch (\Exception $e) {
            return response()->json([
                'error' => '–û—à–∏–±–∫–∞ API Telegram: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
     * GET /api/admin/telegram/webhook-info
     */
    public function getWebhookInfo(): JsonResponse
    {
        $botToken = $this->getBotToken();
        
        if (empty($botToken)) {
            return response()->json([
                'error' => 'Telegram bot token not configured'
            ], 500);
        }

        $url = "https://api.telegram.org/bot{$botToken}/getWebhookInfo";
        
        try {
            $response = Http::get($url);
            
            if ($response->successful()) {
                return response()->json($response->json());
            } else {
                return response()->json([
                    'error' => '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'
                ], 500);
            }
        } catch (\Exception $e) {
            return response()->json([
                'error' => '–û—à–∏–±–∫–∞ API Telegram: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ webhook
     * DELETE /api/admin/telegram/webhook
     */
    public function deleteWebhook(): JsonResponse
    {
        $botToken = $this->getBotToken();
        
        if (empty($botToken)) {
            return response()->json([
                'error' => 'Telegram bot token not configured'
            ], 500);
        }

        $url = "https://api.telegram.org/bot{$botToken}/deleteWebhook";
        
        try {
            $response = Http::post($url);
            
            if ($response->successful()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                ]);
            } else {
                return response()->json([
                    'error' => '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook'
                ], 500);
            }
        } catch (\Exception $e) {
            return response()->json([
                'error' => '–û—à–∏–±–∫–∞ API Telegram: ' . $e->getMessage()
            ], 500);
        }
    }
}